## Generate SSH key content using terraform
resource "tls_private_key" "dev_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

## Create a AWS key pair using the ssh key generated previously
## Stores the public key in aws and private key in the local system
resource "aws_key_pair" "generated_key" {
  key_name   = var.generated_key_name
  public_key = tls_private_key.dev_key.public_key_openssh

  provisioner "local-exec" { # Generate "terraform-key-pair.pem" in current directory
    command = <<-EOT
      echo '${tls_private_key.dev_key.private_key_pem}' > ./'${var.generated_key_name}'.pem
      chmod 400 ./'${var.generated_key_name}'.pem
    EOT
  }

}
resource "local_file" "pem_file" {
  filename             = pathexpand("~/.ssh/${var.generated_key_name}.pem")
  file_permission      = "600"
  directory_permission = "700"
  sensitive_content    = tls_private_key.dev_key.private_key_pem

}
# Optinally you can even output the private key content, though not recommended
output "ssh_key" {
  description = "ssh key generated by terraform"
  value       = tls_private_key.dev_key.private_key_pem
  sensitive   = true
}

###############################################################
#jobsearchservice
###############################################################
resource "aws_ebs_volume" "root-device-jobsearchservice" {
  availability_zone = "eu-west-1a"
  snapshot_id       = data.aws_ebs_snapshot.jobsearchservice.id
  size              = 8
}

resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/sdh"
  volume_id   = aws_ebs_volume.root-device-jobsearchservice.id
  instance_id = aws_instance.ec2-dev-jobsearchservice.id
}


## This is the jobsearchservice vm box
resource "aws_instance" "ec2-dev-jobsearchservice" {
  ami                    = "ami-08ca3fed11864d6bb"
  instance_type          = "t2.medium"
  key_name               = aws_key_pair.generated_key.key_name
  subnet_id              = aws_subnet.public_subnets[0].id
  vpc_security_group_ids = [aws_security_group.dev-jobsearchservice.id]

  tags = {
    Name = "dev-jobsearchservice"
  }
}

# security groups
resource "aws_security_group" "dev-jobsearchservice" {
  name        = "dev-jobsearchservice"
  description = "This is the security group attached to dev-jobsearchservice ec2"
  vpc_id      = aws_vpc.vpc.id

  # Keep the instance private by only allowing traffic from the web server.
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 8118
    to_port     = 8118
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]

  }

  # Allow all outbound traffic.
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

}


###############################################################
#Zulip machine
###############################################################
resource "aws_ebs_volume" "root-device-zulip" {
  availability_zone = "eu-west-1a"
  snapshot_id       = data.aws_ebs_snapshot.dev-zulip-snap.id
  size              = 50
}

resource "aws_volume_attachment" "ebs_att-zulip" {
  device_name = "/dev/sdh"
  volume_id   = aws_ebs_volume.root-device-zulip.id
  instance_id = aws_instance.ec2-dev-zulip.id
}

resource "aws_instance" "ec2-dev-zulip" {
  ami                    = "ami-08ca3fed11864d6bb"
  instance_type          = "t2.medium"
  key_name               = aws_key_pair.generated_key.key_name
  subnet_id              = aws_subnet.public_subnets[0].id
  vpc_security_group_ids = [aws_security_group.dev-zulip.id]

  tags = {
    Name = "dev-zulip"
  }
}

# security groups
resource "aws_security_group" "dev-zulip" {
  name        = "dev-zulip"
  description = "This is the security group attached to dev-zulip ec2"
  vpc_id      = aws_vpc.vpc.id

  # Keep the instance private by only allowing traffic from the web server.
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]

  }

  # Allow all outbound traffic.
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

}
